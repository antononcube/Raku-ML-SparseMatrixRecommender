use Test;
use ML::SparseMatrixRecommender;
use ML::SparseMatrixRecommender::Utilities;
use Math::SparseMatrix;

sub is-smr-map($arg) {
    return $arg ~~ Map:D && (<matrices tag-type-weights data value> (&) $arg.keys).elems == 0;
}

my $dsData = ML::SparseMatrixRecommender::Utilities::get-titanic-dataset();

## 1
is $dsData ~~ (Array:D | List:D) && $dsData.all ~~ Map:D, True, 'expected data shape';

## 2
ok
        ML::SparseMatrixRecommender.new.create-from-wide-form($dsData, item-column-name => 'id', tag-types => Whatever, :!add-tag-types-to-column-name),
        'ok creation from wide form';

my $smr =
        ML::SparseMatrixRecommender
                .new
                .create-from-wide-form(
                    $dsData,
                    item-column-name => 'id',
                    tag-types => Whatever,
                    :!add-tag-types-to-column-names
                )
                .apply-term-weight-functions(
                    global-weight-func => "IDF",
                    local-weight-func  => "None",
                    normalizer-func    => "Cosine"
                );

## 3
ok ML::SparseMatrixRecommender.new($smr.take-matrices);

## 4
my $smr-new = ML::SparseMatrixRecommender.new($smr.take-matrices);

is
        $smr-new.take-matrices ~~ Map:D && $smr-new.take-matrices.values.all ~~ Math::SparseMatrix:D,
        True,
        "smr-new has valid matricss";

## 5
is $smr-new.take-M eqv $smr.take-M, True, "M matrices are equal";

subtest {
    my @long =
            <passengerAge passengerClass passengerSex passengerSurvival>
            .map( -> $tag-type { $dsData.map({ %( id => $_<id>, Variable => $tag-type, Value => $_{$tag-type}) }) })
            .flat(1);

    is @long ~~ (Array:D | List:D | Seq:D) && @long.all ~~ Map:D, True, 'expected long form dataset type';

    is @long.elems, $dsData.elems * 4, 'expected length';

    my $smrObjLong = ML::SparseMatrixRecommender.new
            .create-from-long-form(@long, item-column-name => 'id', tag-type-column-name => 'Variable', tag-column-name => 'Value');

    isa-ok $smrObjLong,  ML::SparseMatrixRecommender:D;

    is $smrObjLong.take-M.rows-count, $dsData.elems, 'expected number of rows of the recommender matrix';
    is $smrObjLong.take-M.columns-count, 17, 'expected number of columns of the recommender matrix';

}, 'creation from long form';

done-testing;